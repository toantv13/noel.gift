const gifts = document.querySelectorAll(".gift");
let selectedGifts = [];
const maxSelection = 2;

const giftData = {
  1: { name: "G·∫•u b√¥ng", image: "assets/gift1.jpg" },
  2: { name: "Ch√∫c b√© may m·∫Øn l·∫ßn sau", image: "assets/gift2.jpg" },
  3: { name: "Nh·∫´n", image: "assets/gift3.jpg" },
  4: { name: "V√≤ng tay", image: "assets/gift4.jpg" },
  5: { name: "1 ƒëi·ªÅu ∆∞·ªõc", image: "assets/gift5.jpg" },
};

// Ho√°n ƒë·ªïi v·ªã tr√≠ c√°c h·ªôp qu√†
function shuffleGifts() {
  const container = document.querySelector(".gifts");
  const shuffledGifts = Array.from(gifts).sort(() => Math.random() - 0.5);
  shuffledGifts.forEach((gift) => container.appendChild(gift));
}

shuffleGifts();

// Hi·ªÉn th·ªã th√¥ng tin m√≥n qu√†
function showGiftInfo(id) {
  const gift = giftData[id];
  showToast(`B·∫°n ƒë√£ ch·ªçn m√≥n qu√†: ${gift.name}`, "success");
}

// Ch·ªçn qu√† v√† ki·ªÉm tra logic
gifts.forEach((gift) => {
  gift.addEventListener("click", function () {
    const giftId = this.dataset.id;

    // ƒê√£ ch·ªçn ƒë·ªß qu√†
    if (selectedGifts.length >= maxSelection) {
      // alert("B·∫°n ƒë√£ ch·ªçn ƒë·ªß 2 m√≥n qu√†! Kh√¥ng th·ªÉ ch·ªçn th√™m.");
      showToast(
        "B√© iu ƒë√£ ch·ªçn ƒë·ªß 2 m√≥n qu√†! Kh√¥ng th·ªÉ ch·ªçn th√™m.\r\nüòèüòèüòèüòÅ",
        "warning"
      );
      return;
    }

    // Ki·ªÉm tra ƒë√£ ch·ªçn qu√† n√†y ch∆∞a
    if (selectedGifts.includes(giftId)) {
      showToast(
        "B√© iu ƒë√£ ch·ªçn m√≥n qu√† n√†y r·ªìi. B√© ch·ªçn m√≥n qu√† kh√°c!",
        "warning"
      );
      return;
    }

    // ƒê√°nh d·∫•u qu√†
    this.classList.add("opened");
    this.textContent = giftData[giftId].name; // Thay th·∫ø t√™n qu√†
    selectedGifts.push(giftId);
    showGiftInfo(giftId);
    const selectedGift = document.querySelector(`.gift[data-id="${giftId}"]`);
    selectedGift.classList.add("selected");

    // Khi ƒë√£ ch·ªçn ƒë·ªß 2 m√≥n qu√†
    if (selectedGifts.length === maxSelection) {
      // Th√¥ng b√°o sau khi ch·ªçn xong
      showToast(
        "B√© iu ch·ªçn xong qu√† r·ªìi ch·ª•p g·ª≠i anh nha \r\nü•∞ü•∞ü•∞",
        "success"
      );
    }
  });
});

// L∆∞u qu√† v√†o file text
function saveGifts(selectedGifts) {
  const giftDetails = selectedGifts
    .map((id) => {
      return `M√≥n qu√† ${id}`;
    })
    .join(", ");

  // T·∫°o file text trong folder "data" (khi s·ª≠ d·ª•ng backend)
  const blob = new Blob([`Selected Gifts: ${giftDetails}`], {
    type: "text/plain",
  });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = "selected_gifts.txt";
  link.click();

  alert("Th√¥ng tin qu√† ƒë√£ ƒë∆∞·ª£c l∆∞u!");
}

// Khi load trang Noel
if (window.location.pathname.includes("noel.html")) {
  const lastPage = localStorage.getItem("lastPage");

  // N·∫øu reload trang Noel, chuy·ªÉn h∆∞·ªõng v·ªÅ Login
  if (lastPage === "noel") {
    localStorage.setItem("lastPage", "login"); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i
    window.location.href = "/index.html"; // ƒê∆∞·ªùng d·∫´n Login Page
  } else {
    localStorage.setItem("lastPage", "noel"); // L∆∞u tr·∫°ng th√°i Noel
  }
}

// Khi ·ªü trang Login
if (window.location.pathname.includes("index.html")) {
  localStorage.setItem("lastPage", "login"); // ƒê·∫∑t tr·∫°ng th√°i l√† Login
}
